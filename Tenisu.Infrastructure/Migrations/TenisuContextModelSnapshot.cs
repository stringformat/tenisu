// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tenisu.Infrastructure.Common;

#nullable disable

namespace Tenisu.Infrastructure.Migrations
{
    [DbContext(typeof(TenisuContext))]
    partial class TenisuContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-rc.1.25451.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tenisu.Domain.RankingAggregate.PlayerEntity.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.ComplexProperty(typeof(Dictionary<string, object>), "Country", "Tenisu.Domain.RankingAggregate.PlayerEntity.Player.Country#Country", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("Country");
                        });

                    b.HasKey("Id");

                    b.HasIndex("RankId")
                        .IsUnique();

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("Tenisu.Domain.RankingAggregate.RankEntity.Rank", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastScores")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid?>("RankingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RankingId");

                    b.ToTable("Rank", (string)null);
                });

            modelBuilder.Entity("Tenisu.Domain.RankingAggregate.Ranking", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.HasKey("Id");

                    b.ToTable("Ranking", (string)null);
                });

            modelBuilder.Entity("Tenisu.Domain.RankingAggregate.PlayerEntity.Player", b =>
                {
                    b.HasOne("Tenisu.Domain.RankingAggregate.RankEntity.Rank", null)
                        .WithOne("Player")
                        .HasForeignKey("Tenisu.Domain.RankingAggregate.PlayerEntity.Player", "RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tenisu.Domain.RankingAggregate.RankEntity.Rank", b =>
                {
                    b.HasOne("Tenisu.Domain.RankingAggregate.Ranking", null)
                        .WithMany("Ranks")
                        .HasForeignKey("RankingId");
                });

            modelBuilder.Entity("Tenisu.Domain.RankingAggregate.RankEntity.Rank", b =>
                {
                    b.Navigation("Player")
                        .IsRequired();
                });

            modelBuilder.Entity("Tenisu.Domain.RankingAggregate.Ranking", b =>
                {
                    b.Navigation("Ranks");
                });
#pragma warning restore 612, 618
        }
    }
}
